<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Travis' Blog</title>
        <link>https://blog.lxythan2lxy.cn</link>
        <description>Travis' personal site about game, programing and movie</description>
        <lastBuildDate>Fri, 20 Jan 2023 10:31:42 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh</language>
        <copyright>All rights reserved 2023, Travis Road</copyright>
        <item>
            <title><![CDATA[2022 年度总结]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/2022_final</link>
            <guid>https://blog.lxythan2lxy.cn/posts/2022_final</guid>
            <pubDate>Sat, 31 Dec 2022 04:55:00 GMT</pubDate>
            <description><![CDATA[2022 年的年度总结，或许只是一些碎碎念
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<h2>碎碎念</h2>
<p>今年首先是考研这条时间线，去年 12 月 26 日考完研，整个人都进入了所谓的贤者时间，再到 3、4 月份复试选组，最后尘埃落定，这其中还是满辛苦的。</p>
<p>这其中还夹杂了我做毕设的时间。今年算是正式入门了深度学习，从感性和理性上接触到深度学习的表现和原理，现在这些复杂的大模型也建立在现在我在看的这些小小的感知机上面。</p>
<p>学习 <a href="https://games-cn.org/intro-graphics/">GAMES101</a> 和 <a href="https://games104.boomingtech.com/sc/">GAMES104</a> ，学习了一点计算机图形学的知识和游戏引擎的顶层设计，虽然都是一点皮毛，但是真的很感谢 <a href="https://games-cn.org/">GAMES</a> 团队能如此无私免费分发如此优质的课程。简单了解了 GAMES 的初衷，我相信，未来中国相关行业的从业人员或多或少都会从中受益。虽然这些内容又广又深，但是 GAMES 的老师们真的是能够深入浅出的介绍知识，即使没听懂，建立一个感性的认知，之后遇到了问题知道该如何寻找答案也是一种进步。</p>
<h2>入门 Arch Linux</h2>
<p>入门了 ArchLinux，作为日常使用的操作系统一直坚持到了现在，目前的 Linux 生态真的该感谢这些跨平台的生态（说的就是你，electron），但是某些国产公司是真的该骂，不过年底倒是听说腾讯准备公测 electron QQ 了。目前 Linux 日常使用不是问题，但是某些刚需软件比如 PowerPoint，Microsoft Word 还是得用 MacOS 或者 Windows，我目前的解决方案是用家里闲置的 Mac mini 2014 来处理这些需要使用 ppt 和 word 的杂活儿。至于真正有生产力的和书写项目文档之类的，还是会在 Linux 上进行。</p>
<p><img src="https://blog.lxythan2lxy.cn/image/linux.png" alt="Linux 桌面"></p>
<p>很多人觉得 ArchLinux 很难入门，退而求其次去使用 ubuntu。我年初先使用了一段时间的 ubuntu，然后重新装了 Arch，我有这么几个感受：</p>
<ol>
<li>Arch Wiki 的文档十分的完备，你能想到的各种入门级问题，都可以通过查阅 Wiki 来解决，这相当于是大家维护的一个官方标准答案，比遇到问题无脑 Google，从某个 20 年前的帖子里找答案要方便的多；</li>
<li>包管理器方面，依托有 AUR 的 yay 和 pacman 比 apt 好用太多了，不用安装一个什么东西都得添加各种 ppa，直接 <code>yay package_name</code> 就能得到你想要的结果，这方面 Arch 做的足够傻瓜足够好用，简直就是 Linux 当中的 App Store；</li>
<li>既然你用了 Linux，那么放弃幻想，这里是 Linux，作为日常使用不折腾是完全不可能的。既然要折腾，不如选择文档完备，干净可自定义的 Arch；</li>
</ol>
<p>ArchLinux 有以上这些爽点，然后再说说日常的一些工作流，我平常用的是 i3wm，平铺窗口真的是很爽的东西，把虚拟桌面（workspace）的作用发挥的淋漓尽致，既然一个桌面中有太多的窗口会杂乱无章，那么我就不让你在一个桌面内叠置太多窗口，转而将窗口分到不同的 workspace 当中去，久而久之我也形成了自己的习惯，哪个工作区放哪个软件基本指哪打哪。</p>
<h2>AI 元年</h2>
<p>不知道今年算不算 AI 生成会话和图像元年，虽然之前确实已经有了 GPT-3，Github 的 copilot 还有用 diffusion 的一众产品，但是今年这些东西却实实在在的出圈了，这些人工智能模型展现了实实在在的泛用性，完全不懂技术的人也能自己琢磨喂给 waifu 的 prompt 来生成自己想要的图片（或者各种各样的搞怪图片），在淘宝花点小钱买个 openAI 的帐号就能体验到 chatGPT 的先进技术，并且 chatGPT 已经展现了它作为一个入门级伙伴的能力，至少在编程方面只要你需要，问问它一般都能找到答案。</p>
<blockquote>
<p>21 世纪的头几年是 Web 开发的黄金时代，当时技术和工具快速发展，即使是最没有才能的程序员，也可以非常容易地快速做出各种好玩的网页效果。AI 的内容生成，目前就处在这个阶段。为模型搭建一个基本的 Web 前端，调用一些新的 API，就可以推出一个非常令人惊叹的新功能。</p>
<p>-- <a href="https://www.jonstokes.com/p/good-news-ai-is-now-in-its-midwit">《现阶段的人工智能》</a></p>
</blockquote>
<h2>书，影和 ACG</h2>
<h3>年度・书影 ACG</h3>
<p>每个类别我都挑选了一个在我今年看过的作品中我最推荐的一部，其中 经过了许多的挣扎 <small>（今年 TGA 的评奖，评委们一定也在老头环、战神和猫 Stray 间挣扎了许久吧）</small></p>








































<table><thead><tr><th>类别</th><th align="center">推荐</th><th align="left">备注</th></tr></thead><tbody><tr><td>书</td><td align="center">《Doom 启示录》</td><td align="left">看约翰・卡马克大佬带着 id soft 乱杀</td></tr><tr><td>影</td><td align="center">《不要抬头》</td><td align="left">小李子的荒诞喜剧，毁灭吧，赶紧的</td></tr><tr><td>剧</td><td align="center">《万神殿》</td><td align="left">upload intelligence！！！</td></tr><tr><td>动漫</td><td align="center">《异世界舅舅》</td><td align="left">反套路的穿越</td></tr><tr><td>漫画</td><td align="center">《关于地的运动》</td><td align="left">科学的魅力，求知的精神，人类的崇高</td></tr><tr><td>游戏</td><td align="center">《小白兔电商》</td><td align="left">只有中国人才能做出的游戏</td></tr></tbody></table>
<h3>书</h3>
<p>恰巧入门了游戏制作，所以我今年推荐的书是 <strong>《Doom 启示录》</strong>，看看游戏引擎之父如何制作在地狱乱杀的毁灭战士。</p>
<p>说实话，我现在看的书十分的匮乏。人文类的小说很久没看过了，偶尔拿起来看两眼也是无法集中注意力看完，反而沉浸于快速廉价的多巴胺的分泌，不知不觉也被卷入了时代的快节奏当中去了。今年迫于 “生计”，看了很多专业相关的书籍，比如《Kubernetes 实战》、《Python 入门深度学习》。至于传记类的书，我看的津津有味，比如《Doom 启示录》和《Unix 传奇》，不过这两本说的仍然是极客们的事情（我今年的兴趣点就在这里，做游戏和入门 Linux）。另外，科幻小说一直都是我的心头好，今年我生生啃完了《海伯利安》，感觉相比与科幻更像是奇幻，不对胃口。另外，我正在看克拉克的《童年的终结》，实在是引人入胜。</p>
<h3>影视</h3>
<p><strong>《不要抬头》</strong> 是一部特别的电影，在这个魔幻的年度尤其尖锐，每个看了它的人，都认为它在嘲讽自己所在的群体，尤其是美国人，左派看了愤怒，右派看了流泪。这部电影用荒诞的方式嘲讽了当今所处的时代。没有人会关心两年后有个陨石会砸下来，因为它还没有砸下来，人们只关心如何贬低对方的观点然后说服别人相信自己的观点。娱乐填满人们的生活，媒体和永不停歇的瀑布流冲刷着人们的大脑，并且高声尖啸：“选个边站吧，这样简单！” 二元对立是一个简单直接，很好理解的模型。在这样的模型下，所有人只需要知道我是好人，非我族类全是坏人，然后朝着另一边扔石头就行了，再简单不过了。</p>
<p>今年还看了很多其他的好电影，比如《灰猎犬号》和《芬奇》，都是汤姆汉克斯演的片子，前者是紧张刺激的驱逐舰对阵潜艇，后者是汉克斯带着狗和机器人一路西行的公路片，总体基调是字面意义上的 “爱，死亡，与机器人”。话说回来，今年的爱死机第三季同样非常好看，重回第一季的感觉</p>
<blockquote>
<p>爱，死亡，机器人</p>
</blockquote>
<h3>ACG - 漫画</h3>
<p>ACG 方面今年依旧是看了大量的动漫和漫画，游戏浅尝辄止，没有玩通什么大作。今年我最喜欢的漫画是 <strong>《关于地的运动》</strong>，这部漫画充分体现了 “朝闻道，夕可死”。</p>
<h3>ACG - 动漫</h3>
<p>今年好看的动漫真的太多了，年底的孤独摇滚实在是让人眼前一亮。扳机社的赛博朋克虽然口碑很好，但是在我看来实在是一般般，完全称不上 “赛博朋克”，只有赛博的壳子，没有朋克的内核。jojo 第六季确实是一个时代的终结了，我更期待的是第七季的 SBR，充满了男人的浪漫的一季。</p>
<h3>ACG - 游戏</h3>
<p>今年我的电子 ed 连被誉为电子伟哥的神之天平都没救回来，全年打了 150 个小时的 Apex，与人斗其乐无穷（虽然大部分时间在坐牢）。老头环和猫我都玩了，实在是不适应魂类游戏，猫也是云通关之后完全没有兴趣自己体验。年底玩了独立游戏霓虹白客和 Rollerdrome，这两个游戏都非常的爽。今年我最喜欢的是 <strong>《小白兔电商》</strong>，在近些年的魔幻背景之下，这款～～建政～～游戏非常符合我的胃口（之前的极乐迪斯科我也很喜欢）。</p>
<h2>写在最后</h2>
<p>其实通篇都是没啥意思的碎碎念，如果能安利到读者一些 ACG 方面的内容那就再好不过了。按道理新年是要给自己立下一些 Flag 的，但是在这个新冠疫情魔幻结束的时间，我只希望家人和朋友能够身体安康的度过新的一年。</p>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[Linux 系统中的信号量]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/Linux_mutex</link>
            <guid>https://blog.lxythan2lxy.cn/posts/Linux_mutex</guid>
            <pubDate>Mon, 28 Feb 2022 12:53:56 GMT</pubDate>
            <description><![CDATA[信号量机制详解
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<p>除了 <code>Kill</code> 信号量，其他信号都留给了进程喘息之机，允许进行一些后处理。</p>
<p><code>INT</code>, <code>TERM</code>, <code>HUP</code>, <code>QUIT</code> 都可以被称为可忽略信号。
<code>KILL</code> 信号不可忽略，强制终止进程。</p>
<pre class="language-shell"><code class="language-shell code-highlight"><span class="code-line line-number" line="1">$ <span class="token function">kill</span> <span class="token parameter variable">-l</span>
</span><span class="code-line line-number" line="2">HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM <span class="token environment constant">TERM</span> URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2
</span></code></pre>
<h2>可忽略信号</h2>
<p>2 号信号 <code>INT</code> (interrupt) 最弱。它的意思是 “停止你现在正在做的事情并等待进一步的用户输入”。这是终端中 <code>&#x3C;C-c></code> 产生的信号</p>
<p>15 号信号 <code>TERM</code> (terminate) 是正常的终止信号（<code>kill</code> 默认发出的信号）。它告诉应用程序干净地退出。该信号允许 <code>trap</code> 处理，它使接收进程能够以有序的方式进行一些清理。如果不想在关键操作中被中断，那么应用程序往往会忽略 <code>SIGTERM</code>。</p>
<p>1 号信号 <code>HUP</code> (hang up) 在苛刻程度上与 <code>SIGTERM</code> 大致相当。当用户与终端断开连接时，它会自动发送到终端中运行的应用程序。</p>
<p>3 号信号 <code>QUIT</code> 是可忽略信号中最苛刻的。当想立刻终止进程时可以使用，并且默认情况下它通常会留下一个 <code>core dump file</code>。</p>
<h2>链接</h2>
<ul>
<li><a href="http://www.linuxcommand.org/lc3_man_pages/kill1.html">kill manpage</a></li>
<li><a href="https://unix.stackexchange.com/questions/251195/difference-between-less-violent-kill-signal-hup-1-int-2-and-term-15">difference between kill and int</a></li>
<li><a href="https://www.semicolonandsons.com/code_diary/unix/kill-vs-term-vs-int-vs-quit-signals">kill and init and quit</a></li>
</ul>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[Arch Linux 个人小记]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/archlinux_share</link>
            <guid>https://blog.lxythan2lxy.cn/posts/archlinux_share</guid>
            <pubDate>Thu, 19 Jan 2023 18:44:56 GMT</pubDate>
            <description><![CDATA[说说我是如何使用 Arch Linux 的，卖卖安利
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<p><quote>KISS: Keep It Simple, Stupid</quote></p>
<h2>整体配置</h2>
<ul>
<li>发行版：Arch Linux</li>
<li>WM：i3wm</li>
<li>终端：kitty</li>
<li>应用启动器：albert (rofi, dmenu)</li>
<li>dock: polybar</li>
<li>窗口混成器 (composite): picom-jonaburg-git</li>
</ul>
<p><img src="https://blog.lxythan2lxy.cn/image/2023-01-10-09-53-53.png" alt="台式机的信息"></p>
<h2>为啥要折腾 Arch</h2>
<dialog>
  为什么要折腾 Arch Linux 呢 ？🤔
  <br> 用 Windows WSL 或者装个黑苹果，或者用 ubuntu，不香吗？
</dialog>
<dialog reverse="true">
  <p class="not-prose">
    &#x3C;> 因为 
    <del>
      <a href="https://wiki.archlinux.org/title/Arch_is_the_best" class="text-nord-10 hover:underline dark:text-nord-9">
        &#x3C;>"Arch is the best!"
      </a>
    </del>
    &#x3C;>，开玩笑的。
  </p>
</dialog>
<div class="py-0.5"></div>
<p><img src="https://blog.lxythan2lxy.cn/image/2023-01-10-10-33-57.png" alt="Arch 邪教"></p>
<border>
  <ol>
    <li class=""> 折腾也是一种乐趣 </li>
    <li>Windows 不是 Linux，MacOS 也只是类 Unix</li>
    <li>Linux 能让你看到一些操作系统较为底层的东西 </li>
  </ol>
</border>
<p>首先说说 <strong>“折腾”</strong> 这件事，如果我需要使用 Linux, 那么折腾是必然的，这和我用什么发行版并没有太大关系，这个时候不如用一个比较纯净的系统（比如 Arch）方便下手把玩。
举个例子 🌰，一般的开箱即用的发行版就像精装修的样板房，提包入住，但是我很难一下子弄清楚房间里面的布线和一些家具的设置，万一某个组件坏了无从下手（尤其是当我自己还要当维修工人的时候）。
Arch 就像一个毛坯房，水管电线什么的都预留好了，我需要做的仅仅是对着宜家的家具清单（Arch Wiki）找到自己想要的家具，一件件充实自己的小窝。
这种感觉是无与伦比的，因为这个时候，它其中的各种东西是按照我的喜好来选择配置的，我好像真正的拥有了它。
在纯净的 Arch Linux 系统上，我能在简易的 WM 上慢慢调整自己的桌面布局，用按键映射软件或者快捷键管理软件管理自己的工作流，可以看看 <a href="https://www.reddit.com/r/unixporn/">unixporn</a> 看看大家是怎么美化桌面折腾电脑的，有非常多可供自定义的选项等待着去发掘。</p>
<p>然后再说说 Linux 系统，我们开发的后端软件大多数是最终需要交付到 Linux 系统上的，能在 Linux 上编码自然的就有原生的优势。
当然，在 Win 和 MacOS 上也有解决方案 —— 虚拟机、docker 或者 vscode remote 到服务器上进行编码，不一而足。
折腾过 Windows 环境的人应该都能理解，Windows 和 Unix 系的系统很多小细节都不尽相同，更重要的是 Windows 并不是全局 UTF-8，有时会出现奇奇怪怪的问题。
再者，一如 Windows 的名字，它是一个图形操作系统，MacOS 也是，在命令行的支持上 Linux 会更好。</p>
<blockquote>
<p>Linux is only free if your time has no value</p>
</blockquote>
<p>以上这些都不过是萝卜青菜各有所爱。我需要经常处理 k8s 的东西，平时接触的生态比较贴近 Linux，平时用不着 Linux 的同学大可不必大行折腾。</p>
<h2>优点</h2>
<h3>了解 Linux</h3>
<p>Arch Linux 有很齐全的 <a href="https://wiki.archlinux.org/">ArchWiki</a> 可供查阅。</p>
<p>学习所有东西都是有成本的，即使是友好的 Windows 系统，第一次接触的小朋友也需要上手慢慢使用才能逐渐弄明白操作逻辑。
在本科期间，我第一次接触 Linux 是在 CSAPP 课程的 bomb lab 上，当时连 shell 都不知道怎么用，需要使用 gdb 调试器在命令行中敲敲打打拆炸弹。这是对 Linux 的直观印象。
在实践之后需要理论学习，将之内化于心。要学习 Linux，除了看到的各种小技巧，还需要大量的实践来熟悉操作。
接下来，在 “熟悉” 和 “理解” 之间还有很多的路需要走，这个时候就需要再去学习理论知识，如此循环往复，是一个螺旋上升的过程。</p>
<p>为了大量实践 Linux, 日常使用 Linux 是一个选择 —— 不是使用虚拟机，不是使用远程服务器，而是真真正正自己安装一个系统在物理磁盘上，从配置引导开始开始一步步配置属于自己的 Linux 系统。
在这个过程中，不出意外的会遇到了许多挫折，很多 “难者不会，会者不难” 的问题能折腾许久，
通过 <a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a>，<a href="https://en.wiktionary.org/wiki/STFW">STFW</a> 最后就能解决 90% 的问题。</p>
<dialog reverse="true">
  Read The ~~F\*\*king~~ Friendly Manual. <br> Search The ~~F\*\*king~~
  Friendly Web.
</dialog>
<dialog>OK, fine.</dialog>
<h3>包管理器</h3>
<p>Linux 的包管理器非常省心省力，回顾一下 windows 的各种软件安装流程，“进入某个软件的官网 ➡️ 下载安装器 ➡️ 双击下载”，
但是在 Linux 下用 <code>yum</code>、<code>apt</code>、<code>pacman</code> 之类的包管理器一行命令就能把软件安装好，更好的是这种流程方便自动化和记录，软件也能保证一个比较新的状态。
相比于 ubuntu 的包管理器，Arch Linux 的包管理器 <code>pacman</code> 更加方便。
这种便利性来源于 <a href="https://wiki.archlinux.org/title/Arch_User_Repository">AUR (Arch User Repository)</a>，这是一个社区主导的软件仓库，里面包含了各种软件的打包脚本，
只需要使用 <code>yay</code> 或者 <code>paru</code> 这种 AUR helper 就能傻瓜式的安装各种软件，摆脱折腾 ubuntu ppa 的麻烦。</p>
<p>假如我需要安装著名的 <code>fd</code>、<code>ripgrep</code> 和我很喜欢的按键映射软件 keyd <sup><a href="#user-content-fn-keyd" id="user-content-fnref-keyd" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup> ，那么我只需要使用如下命令就能安装</p>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line line-number" line="1">yay <span class="token parameter variable">-S</span> fd ripgrep
</span><span class="code-line line-number" line="2">yay <span class="token parameter variable">-S</span> keyd
</span></code></pre>
<p><img src="https://blog.lxythan2lxy.cn/image/2023-01-16-17-13-41.png" alt="yay 的使用"></p>
<dialog reverse="true">
  顺带一提，Windows 现在也有 `scoop`、`chocolaty`、`winget` 这些包管理器了
</dialog>
<h3>平铺窗口管理器</h3>
<p>不同于 MacOS 和 Windows 的浮动窗口管理器，Linux 上有一种全新的窗口管理体验 —— 平铺窗口管理器 <sup><a href="#user-content-fn-tilingwm" id="user-content-fnref-tilingwm" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>。</p>
<p><img src="https://blog.lxythan2lxy.cn/image/linux.png" alt="平铺窗口管理器 i3wm"></p>
<p>一般来说，浮动窗口管理会在一个桌面里开多个窗口，窗口之间是可以相互重叠的。
但是平铺窗口管理则倾向于把所有的窗口都密铺在桌面上，也就是说桌面始终是占满的状态，那么这个时候如果我开了几十个窗口，在桌面上岂不是什么都看不到了？
这个时候，我们有工作区（workspace）这个概念（下文称 ws），也就是其他操作系统当中的虚拟桌面，在工作区之间切换只需要使用 <code>win+number</code> 就可以快速切换。
一般来说，我会将浏览器绑定在 ws2，即时通讯 app 放在 ws3，笔记软件放在 ws4，rss 阅读器放在 ws6，编码环境会放在 ws10+ 的位置，这些配置都依个人而定，可以很简单的进行设置。</p>
<p>平铺窗口管理的优点主要是它能保证我在一个工作区内能足够专注，主要的软件能占用满整块屏幕。但是，如果某个工作需要开很多窗口，这种桌面管理未免有些麻烦，这个时候也能把各个窗口重新排列。
形成如下列图片所示的堆叠模式。</p>
<photoprovider>
  <div class="relative overflow-auto rounded-lg shadow-lg dark:bg-nord-0 dark:shadow-none">
    <div class="flex w-full snap-x snap-mandatory gap-8 overflow-x-auto py-0">
      <div class="last:pr-[calc (100%-21.5rem)] relative shrink-0 snap-center snap-normal scroll-ml-6 first:pl-6">
        <photoview src="https://blog.lxythan2lxy.cn/image/2023-01-18_03-54.png">
          <img src="https://blog.lxythan2lxy.cn/image/2023-01-18_03-54.png" class="relative w-80 shrink-0 cursor-pointer bg-white shadow-xl sm:w-[45rem]" draggable="false">
        </photoview>
      </div>
      <div class="last:pr-[calc (100%-21.5rem)] relative shrink-0 snap-center snap-normal scroll-ml-6 first:pl-6">
        <photoview src="https://blog.lxythan2lxy.cn/image/2023-01-18_03-54_1.png">
          <img src="https://blog.lxythan2lxy.cn/image/2023-01-18_03-54_1.png" class="relative w-80 shrink-0 cursor-pointer bg-white shadow-xl sm:w-[45rem]" draggable="false">
        </photoview>
      </div>
      <div class="relative shrink-0 snap-center snap-normal scroll-ml-6 first:pl-6 last:pr-6">
        <photoview src="https://blog.lxythan2lxy.cn/image/2023-01-18_03-54_2.png">
          <img src="https://blog.lxythan2lxy.cn/image/2023-01-18_03-54_2.png" class="relative w-80 shrink-0 cursor-pointer bg-white shadow-xl sm:w-[45rem]" draggable="false">
        </photoview>
      </div>
      
    </div>
  </div>
</photoprovider>
<h2>缺点</h2>
<h3>软件生态</h3>
<p>由于 Linux 桌面用户太少，并且 Linux 有各大发行版，本就不多的用户量被掰得更加细碎，各大厂商并不会第一时间考虑 Linux 用户，国产软件更是如此。腾讯系的 QQ、Tim、微信等一度并没有官方支持的 Linux 版本。
在文档编辑方面，Microsoft 的 office 已经成为一种标准，平常需要写的各种杂七杂八的文档都需要在 office 上编写，这是在 Linux 上不能做的事情，wps office 和 libreOffice 并不能完全替代 MicroSoft Office。
近几年由于开发成本，大家开始拥抱 electron 应用，真正意义上的一次编写处处运行。也许这也是未来 Linux 软件生态的破局之道。</p>
<p>至于游戏方面，阀门厂的 Steam Deck 上的 SteamOS <sup><a href="#user-content-fn-steamos" id="user-content-fnref-steamos" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup> 就是 Arch 系的，阀门厂为兼容层做了相当多的优化，相信未来 Linux 的游戏生态也会有所好转。</p>
<p>但是目前看来，软件生态上 Linux 还是有巨大的缺失，能满足程序员的需求但是普通群众确实没有什么理由接触这个门槛很高的操作系统。</p>
<h3>太折腾</h3>
<p>Arch Linux 不够开箱即用，虽然可以自定义很多组件，不过都需要折腾。
对于小白来说，最麻烦的莫过于定位问题，没有碰到过千奇百怪的问题就很难知道到底是什么组件出现了问题。
我个人而言，就遇到过 GRUB 引导错误，X server 不能启动等问题，身边常备着 <a href="https://www.ventoy.net/cn/index.html">ventoy</a> 的 U 盘，里面装着最新的 Arch Live 光盘映像，随时准备修复系统。</p>
<p>Arch Linux 是滚动发行版，不同于 ubuntu 的点发行版，Arch Linux 更新很频繁，网传有所谓的 “滚挂” 的现象产生。</p>
<h2>总结</h2>
<p>适合自己的才是最好的。Arch Linux 提供了构建适合自己的工作流的途径。</p>
<p>如果读者看到这里想自己试试装个 Linux 玩玩。
不妨从 Ubuntu desktop 开始试水，然后再试试 <a href="https://manjaro.org/">Manjaro</a>，这是一个 arch 系的操作系统，开箱即用，可以轻松体验到 arch 生态。
如果希望直接入手 Arch Linux，不妨从官网的 <a href="https://wiki.archlinux.org/title/Installation_guide">安装指南</a> 开始，也可以使用 Arch Linux Studio 发布的 <a href="https://archlinuxstudio.github.io/ArchLinuxTutorial/#/">ArchTutorial</a>。</p>
<p>不管是哪个发行版，遇到问题时请时刻谨记 RTFM、STFW、<del>RTFSC</del>，大部分情况都会有前人替我们踩好了一路上的坑，自己实在解决不了了再寻求社区帮助，或者给仓库提 issue。</p>
<hr>
<section data-footnotes="" class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-keyd">
<p><a href="https://github.com/rvaiya/keyd">keyd - A key remapping daemon for linux</a> <a href="#user-content-fnref-keyd" data-footnote-backref="" class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-tilingwm">
<p><a href="https://wiki.archlinux.org/title/Window_manager#Tiling_window_managers">tiling windows manager</a> <a href="#user-content-fnref-tilingwm" data-footnote-backref="" class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-steamos">
<p><a href="https://store.steampowered.com/steamos">https://store.steampowered.com/steamos</a> <a href="#user-content-fnref-steamos" data-footnote-backref="" class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[Linux 系统下输入候选框不跟随光标的问题]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/jetBrainsIMproblem</link>
            <guid>https://blog.lxythan2lxy.cn/posts/jetBrainsIMproblem</guid>
            <pubDate>Fri, 13 Jan 2023 16:01:48 GMT</pubDate>
            <description><![CDATA[解决一下 jre 的老问题
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<p>Linux 系统下 Jetbrains 的各个产品所使用的 java runtime 有个 bug, 使得 ibus 或者 fcitx 的输入候选框永远出现在应用的左下角，为了解决这个问题，只需要替换掉这个 jre 就可以了。</p>
<p><img src="https://blog.lxythan2lxy.cn/image/2023-01-14-00-03-19.png" alt="安装完成的提示"></p>
<p>Arch Linux 用户可以简单使用 <code>yay -S jbr-linux-x64</code> 安装 jbr（JetBrainsRuntime），然后按照提示，在 IDEA 中依次选择 <code>Help -> Find Action -> Choose Boot Java Runtime for the IDE</code> 更换 jbr</p>
<p>非 Arch 用户可以手动在这个 <a href="https://github.com/RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64">JetBrainsRuntime-for-linux-x64\Github</a> 仓库中下载 jbr，然后按照上面的方法替换即可。</p>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[pytorch 中 DataLoader 的问题]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/pytorch_DataLoader</link>
            <guid>https://blog.lxythan2lxy.cn/posts/pytorch_DataLoader</guid>
            <pubDate>Tue, 25 Jan 2022 14:09:14 GMT</pubDate>
            <description><![CDATA[DataLoader 多进程异常退出
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<h2>复现问题</h2>
<p><code>RuntimeError: DataLoader worker (pid (s) 34132) exited unexpectedly</code>，但是如果将 <code>num_workers</code> 设置为 0，则不会出现这个问题。只用单线程跑的话不会出问题。</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">import</span> torch
</span><span class="code-line line-number" line="2"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
</span><span class="code-line line-number" line="3"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader
</span><span class="code-line line-number" line="4">
</span><span class="code-line line-number" line="5">
</span><span class="code-line line-number" line="6"><span class="token keyword">class</span> <span class="token class-name">WineDataset</span> <span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line line-number" line="7">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line line-number" line="8">        <span class="token comment"># data loading</span>
</span><span class="code-line line-number" line="9">        xy <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt <span class="token punctuation">(</span>
</span><span class="code-line line-number" line="10">            <span class="token string">"./pytorchTutorial/data/wine/wine.csv"</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
</span><span class="code-line line-number" line="11">        <span class="token punctuation">)</span>
</span><span class="code-line line-number" line="12">        self<span class="token punctuation">.</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy <span class="token punctuation">(</span>xy <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="13">        self<span class="token punctuation">.</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy <span class="token punctuation">(</span>xy <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="14">        self<span class="token punctuation">.</span>n_samples <span class="token operator">=</span> xy<span class="token punctuation">.</span>shape <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># number of samples</span>
</span><span class="code-line line-number" line="15">
</span><span class="code-line line-number" line="16">    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line line-number" line="17">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token punctuation">[</span>index<span class="token punctuation">]</span>
</span><span class="code-line line-number" line="18">
</span><span class="code-line line-number" line="19">    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line line-number" line="20">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>n_samples
</span><span class="code-line line-number" line="21">
</span><span class="code-line line-number" line="22">
</span><span class="code-line line-number" line="23">
</span><span class="code-line line-number" line="24">dataset <span class="token operator">=</span> WineDataset <span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="25"><span class="token comment"># first_data = dataset [0]</span>
</span><span class="code-line line-number" line="26"><span class="token comment"># features, labels = first_data</span>
</span><span class="code-line line-number" line="27">dataloader <span class="token operator">=</span> DataLoader <span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="28">dataiter <span class="token operator">=</span> <span class="token builtin">iter</span> <span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span>
</span><span class="code-line line-number" line="29">data <span class="token operator">=</span> dataiter<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="30">features<span class="token punctuation">,</span> labels <span class="token operator">=</span> data
</span><span class="code-line line-number" line="31"><span class="token keyword">print</span> <span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>
</span></code></pre>
<h2>解决</h2>
<p>发现有很多人都有这个问题，<a href="https://github.com/pytorch/pytorch/issues/5301">Runtime Error with DataLoader: exited unexpectedly</a>。但是貌似还没有人解释为什么这个问题会出现。</p>
<blockquote>
<p>I had a similar error with my datasets.
The problem was that I had incorrect dimensions at some point which made some of the tensors become huge, so they were overfilling the memory.</p>
<p>Correcting the dimensions solved this problem.</p>
</blockquote>
<p>解决方法很简单，把迭代部分放在 <code>__main__</code> 中就可以了</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
</span><span class="code-line line-number" line="2">    dataset <span class="token operator">=</span> WineDataset <span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="3">    dataloader <span class="token operator">=</span> DataLoader <span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="4">    dataiter <span class="token operator">=</span> <span class="token builtin">iter</span> <span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span>
</span><span class="code-line line-number" line="5">    data <span class="token operator">=</span> dataiter<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="6">    features<span class="token punctuation">,</span> labels <span class="token operator">=</span> data
</span></code></pre>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[失控玩家]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/theguy</link>
            <guid>https://blog.lxythan2lxy.cn/posts/theguy</guid>
            <pubDate>Fri, 10 Sep 2021 10:37:27 GMT</pubDate>
            <description><![CDATA[有意思的玩梗大片
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<p><img src="https://blog.lxythan2lxy.cn/image/p2600185312.webp" alt=""></p>
<p>刚放出宣传片就有关注。虽然没有斯皮尔伯格老爷子的头号玩家华丽，但是比起老爷子尽力去迎合年轻人，Free Guy 更有玩家感，并且有更多游戏开发者的热忱。（尽管编剧是同一个人）</p>
<p>作为赛博爆米花版楚门的世界，设定在今天来看其实并不新颖，但是很戳独立开发者的内心。</p>
<p>纠结设定和剧情合理性的评论大可不理会，在虚拟世界中追求真实感的人头脑一定有问题.jpg。光剑为啥能擦出火花，太空纪元了为啥用冷兵器，问就是为剧情服务。锦上添花的事不能直接打成主要矛盾。</p>
<p>希望不久的将来会诞生应用这种人工智能的游戏，想象一下你遇上的所有的 npc 都将是 monika</p>
<p>来个脑洞，R&#x26;M 有一集 miniverse，讲的是 rick 造了个微宇宙电池，其中的居民继续套娃的故事。如果真的造出 AI，给他足够的硬件资源，AI 还会继续造 AI 吗？</p>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[双城之战]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/twocity</link>
            <guid>https://blog.lxythan2lxy.cn/posts/twocity</guid>
            <pubDate>Fri, 07 Jan 2022 09:41:09 GMT</pubDate>
            <description><![CDATA[好，但没有那么好
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<ul>
<li>剧情评分 6.5/10</li>
<li>制作评分 8.5/10</li>
</ul>
<p><img src="https://blog.lxythan2lxy.cn/image/2022-01-07-17-47-13.png" alt=""></p>
<p>一句话感受：** 一部够爽的片子 **</p>
<p>我本人完全没有玩过英雄联盟，但是看的时候依然兴致勃勃，相信在其中有很多游戏玩家能发现的彩蛋。</p>
<p>今敏的片子里，哪怕是一片云都有意义。在双城之战中也是如此。各个场景中的小物件可以看出制作团队的用心（尤其是在摆烂之风盛行的疫情波及之年）。</p>
<p>剧情方面但是在接受了马克思主义熏陶之后，对这种下城对上城的摆烂式抗争感到有些不解。我们自己的幸福应该靠我们自己争取，而不是靠既得利益者的施舍。也许有人会说这种革命未免有些理想主义，但是我们的革命往往就是需要这种理想主义者冲锋在前。</p>
<p>另外，双城之战做的比较好的的一点是，他没有奢求制作水平和剧本水平双高，制作方面可以看出来下了非常大功夫。对于一个初出茅庐的制作团队，要在两个方面都寻求突破无疑是危险的，双管齐下的结果很可能就是一个都得不到。</p>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[javascript 的异步问题和 this 问题]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/vue3</link>
            <guid>https://blog.lxythan2lxy.cn/posts/vue3</guid>
            <pubDate>Fri, 14 Jan 2022 10:17:00 GMT</pubDate>
            <description><![CDATA[javascript 问题
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<h2>代码</h2>
<pre class="language-html"><code class="language-html code-highlight"><span class="code-line line-number" line="1"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>template</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="2">  <span class="token comment">&#x3C;!-- record has been declared --></span>
</span><span class="code-line line-number" line="3">  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit (record)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>edit<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a-button</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="4">  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a-modal</span> <span class="token attr-name">data-source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>treeSelectData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="5">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="6">      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="7">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a-form-item</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="8">  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a-modal</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="9"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>template</span><span class="token punctuation">></span></span>
</span></code></pre>
<pre class="language-typescript"><code class="language-typescript code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">"wangeditor"</span><span class="token punctuation">;</span> <span class="token comment">//a Rich Text Format Editor</span>
</span><span class="code-line line-number" line="2">
</span><span class="code-line line-number" line="3"><span class="token comment">//variables has been declared</span>
</span><span class="code-line line-number" line="4"><span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="5">  modalVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//show the a-modal</span>
</span><span class="code-line line-number" line="6">  doc<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7">
</span><span class="code-line line-number" line="8">  treeSelectData<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>docs<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">  <span class="token function">setDisable</span><span class="token punctuation">(</span>treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">,</span> record<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="10">  treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"root"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//treeSelectData is the datasource of a-modal</span>
</span><span class="code-line line-number" line="11">
</span><span class="code-line line-number" line="12">  <span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="13">  editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="14"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<h2>现象</h2>
<h3>异步问题</h3>
<p>报错 <code>Invalid selector: #content</code>，只有我按下 edit 按钮时，modal 才会出现。也就是说这之前 DOM 里面是没有元素 <code>&#x3C;div id="content">&#x3C;/div></code> 的。</p>
<p>但是如果将 edit 改造成一个异步方法，在 <code>treeSelectData.value.unshift ({ id:"0", name:"root"});</code> 前加上 <code>await</code>，就不会报错并且也能正常显示出 <code>editor</code>。</p>
<p>所以这是为什么呢？</p>
<p>我的猜测是只有在数据源准备好的时候 a-modal 才会显示，所以我把 <code>treeSelectData.value.unshift ({ id:"0", name:"root"});</code> 加上 <code>await</code> 就能解决问题了。</p>
<pre class="language-typescript"><code class="language-typescript code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">"wangeditor"</span><span class="token punctuation">;</span> <span class="token comment">//a Rich Text Format Editor</span>
</span><span class="code-line line-number" line="2">
</span><span class="code-line line-number" line="3"><span class="token comment">//variables has been declared</span>
</span><span class="code-line line-number" line="4"><span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>record<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="5">  modalVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//show the a-modal</span>
</span><span class="code-line line-number" line="6">  doc<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7">
</span><span class="code-line line-number" line="8">  treeSelectData<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>docs<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">  <span class="token function">setDisable</span><span class="token punctuation">(</span>treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">,</span> record<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="10">  <span class="token keyword">await</span> treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"root"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//treeSelectData is the datasource of a-modal</span>
</span><span class="code-line line-number" line="11">
</span><span class="code-line line-number" line="12">  <span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="13">  editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="14"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<h3>this 的问题</h3>
<p><code>handleQueryContent (record)</code> 是一个异步方法，从后端 <code>GET</code> 一个字符串，返回一个 <code>Promise&#x3C;string></code>。我的目的是直接在富文本编辑器中显示这个数据，显示方法大概是 <code>editor.txt.html (val:string)</code>。</p>
<pre class="language-typescript"><code class="language-typeScript code-highlight"><span class="code-line line-number" line="1"><span class="token function">handleQueryContent</span> <span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span> <span class="token punctuation">(</span>editor<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>此时如果直接调用 <code>handleQueryContent (record) .then (editor.txt.html)</code>，就会报错 <code>editor undefined</code>。</p>
<p>调试一下发现是这个函数内部使用了 <code>this</code>，我这里这样调用是把调用处的上下文 <code>this</code> 传入了 <code>editor.txt.html ()</code>。</p>
<h3>解决办法</h3>
<ol>
<li>
<p>使用箭头函数或者匿名函数就可以了，如下：</p>
<pre class="language-typescript"><code class="language-typescript code-highlight"><span class="code-line line-number" line="1"><span class="token function">handleQueryContent</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  editor<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
</li>
<li>
<p>如果是自己写代码，也可以在 <code>editor</code> 实例化的时候将 <code>this</code> 绑定到 <code>editor</code> 上 <sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup></p>
</li>
<li>
<p>也可以在对象实例化的时候用 <code>that</code> 获取 <code>this</code>，之后一直用 <code>that</code> 就没有歧义了 <sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup></p>
</li>
</ol>
<section data-footnotes="" class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a> <a href="#user-content-fnref-1" data-footnote-backref="" class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-2">
<p><a href="https://stackoverflow.com/questions/4011793/this-is-undefined-in-javascript-class-methods">https://stackoverflow.com/questions/4011793/this-is-undefined-in-javascript-class-methods</a> <a href="#user-content-fnref-2" data-footnote-backref="" class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[windows 3000 4200 端口神奇的消失事件]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/windows3000-4200port</link>
            <guid>https://blog.lxythan2lxy.cn/posts/windows3000-4200port</guid>
            <pubDate>Mon, 27 Dec 2021 16:20:25 GMT</pubDate>
            <description><![CDATA[windows 的保留端口
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<hr>
<h1>😥</h1>
<p>今天在写 react 玩具的时候发现 3000 端口始终被占用，但是在我运行 <code>netstat -ano | find 3000</code> 后并没有结果，也就是说此时 3000 端口并没有被占用，上网搜索之后很多答案都是指示 3000 被占用，使用 <code>npx kill-port 3000</code> 这样的命令 <code>kill</code> 掉就好了，但是很显然这样并不能解决问题。</p>
<p>最后终于看到了有用的帖子，这是链接：<a href="https://blog.miniasp.com/post/2019/03/31/Ports-blocked-by-Windows-10-for-unknown-reason">Windows 10 無法 LISTEN Port 4200 與 Port 3000 的靈異事件整理</a>。</p>
<p>最后采用了如下方法解决</p>
<pre class="language-powershell"><code class="language-powershell code-highlight"><span class="code-line line-number" line="1">netsh int ipv4 show excludedportrange protocol=tcp
</span></code></pre>
<p>列出了所有的保留端口，发现 3000 被保留了。那么这个时候我们要做的事情就很简单了，把 3000 的端口设为 ** 不保留 ** 的即可。</p>
<ol>
<li>
<p>首先关闭 <code>wsl</code>，重启 <code>winnet</code> 服务，释放保留的 _ port range_</p>
<pre class="language-powershell"><code class="language-powershell code-highlight"><span class="code-line line-number" line="1"><span class="token comment"># 1. 停用 WSL 服務</span>
</span><span class="code-line line-number" line="2"> wsl <span class="token operator">--</span>shutdown
</span><span class="code-line line-number" line="3"> wsl <span class="token operator">-</span>l <span class="token operator">-</span>v
</span><span class="code-line line-number" line="4">
</span><span class="code-line line-number" line="5"> <span class="token comment"># 2. 停用 Docker 服務</span>
</span><span class="code-line line-number" line="6">
</span><span class="code-line line-number" line="7"> <span class="token comment"># 3. 重啟 WinNAT 服務</span>
</span><span class="code-line line-number" line="8"> net stop winnat
</span><span class="code-line line-number" line="9"> net <span class="token function">start</span> winnat
</span><span class="code-line line-number" line="10">
</span><span class="code-line line-number" line="11"> <span class="token comment"># 4. 啟動 Docker 服務</span>
</span></code></pre>
</li>
<li>
<p>设定自己的保留部分</p>
<pre class="language-powershell"><code class="language-powershell code-highlight"><span class="code-line line-number" line="1">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=3000
</span><span class="code-line line-number" line="2">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=3001
</span><span class="code-line line-number" line="3">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=4200
</span><span class="code-line line-number" line="4">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=5000
</span><span class="code-line line-number" line="5">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=5001
</span><span class="code-line line-number" line="6">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=8080
</span><span class="code-line line-number" line="7">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=8888
</span></code></pre>
<p>如果想要删除也很容易</p>
<pre class="language-powershell"><code class="language-powershell code-highlight"><span class="code-line line-number" line="1">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=3000
</span><span class="code-line line-number" line="2">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=3001
</span><span class="code-line line-number" line="3">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=4200
</span><span class="code-line line-number" line="4">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=5000
</span><span class="code-line line-number" line="5">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=5001
</span><span class="code-line line-number" line="6">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=8080
</span><span class="code-line line-number" line="7">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=8888
</span></code></pre>
</li>
</ol>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
        <item>
            <title><![CDATA[利用 fzf 实现的历史记录]]></title>
            <link>https://blog.lxythan2lxy.cn/posts/zsh_history</link>
            <guid>https://blog.lxythan2lxy.cn/posts/zsh_history</guid>
            <pubDate>Sat, 30 Apr 2022 16:35:59 GMT</pubDate>
            <description><![CDATA[设置 zsh 历史记录模糊查询
请在浏览器中浏览以获得最佳体验]]></description>
            <content:encoded><![CDATA[<h2>设置历史命令查看</h2>
<p>这里我想达到的目的是按下 <code>C-r</code> 按键时会弹出窗口来选择历史，并且带有模糊搜索的功能。恰好 <code>fzf</code> 命令有这个功能，用包管理器安装好之后，就可以开始写小脚本了。</p>
<p><img src="https://blog.lxythan2lxy.cn/image/zsh_history.gif" alt="按下 Ctrl+r 出现历史记录的选择器"></p>
<pre><code class="language-shell:~/.zshrc code-highlight"><span class="code-line line-number highlight-line" line="1"># select history command in fzf mode
</span><span class="code-line line-number highlight-line" line="2">function hist (){
</span><span class="code-line line-number" line="3">    if [ $#LBUFFER -gt 0 ]; then
</span><span class="code-line line-number" line="4">        BUFFER=$(history -n | awk '!seen [$0]++' | \
</span><span class="code-line line-number" line="5">            fzf -e --reverse --no-sort --tac --border=rounded --height=50% --query $LBUFFER)
</span><span class="code-line line-number" line="6">    else
</span><span class="code-line line-number" line="7">        BUFFER=$(history -n | awk '!seen [$0]++' | \
</span><span class="code-line line-number" line="8">            fzf -e --reverse --no-sort --tac --border=rounded --height=50%)
</span><span class="code-line line-number" line="9">    fi
</span><span class="code-line line-number" line="10">    CURSOR=$#BUFFER
</span><span class="code-line line-number" line="11">    zle redisplay
</span><span class="code-line line-number" line="12">}
</span><span class="code-line line-number" line="13">zle -N hist
</span><span class="code-line line-number" line="14">bindkey '^r' hist
</span></code></pre>
<h3>解释</h3>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line line-number" line="1"><span class="token function">history</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'!seen [$0]++'</span> <span class="token operator">|</span> fzf <span class="token punctuation">\</span>
</span><span class="code-line line-number" line="2">    <span class="token parameter variable">-e</span> <span class="token parameter variable">--reverse</span> --no-sort <span class="token parameter variable">--tac</span> <span class="token punctuation">\</span>
</span><span class="code-line line-number" line="3">    <span class="token parameter variable">--border</span><span class="token operator">=</span>rounded <span class="token parameter variable">--height</span><span class="token operator">=</span><span class="token number">50</span>%
</span></code></pre>
<p>首先看看 <code>history</code> 命令输出的格式，看到 <code>omz_history</code> 默认是带有前面的数字的，我们把它用 <code>-n</code> 选项取消掉。</p>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line line-number" line="1">➜ repo ✗ <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">tail</span>
</span><span class="code-line line-number" line="2"> <span class="token number">6174</span>  <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span>
</span><span class="code-line line-number" line="3"> <span class="token number">6175</span>  <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-h</span>
</span><span class="code-line line-number" line="4"> <span class="token number">6176</span>  <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-h</span>
</span><span class="code-line line-number" line="5"> <span class="token number">6177</span>  <span class="token function">docker</span> <span class="token function">ls</span>
</span><span class="code-line line-number" line="6"> <span class="token number">6178</span>  <span class="token function">docker</span> list
</span><span class="code-line line-number" line="7"> <span class="token number">6179</span>  <span class="token function">which</span> <span class="token function">history</span>
</span></code></pre>
<p>管道中的第二命令 <code>awk '!seen [$0]++'</code> 是用来去重的 <sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>，使用 <code>uniq</code> 命令的话需要将 history 排序，并不符合我们的需求。</p>
<p>最后就是 <code>fzf</code> 命令了。简单解释一下，<code>fzf</code> 能接受多行输入，将之变成一个选择界面。<code>--reverse --border=rounded --height=50%</code> 这几个选项都是调整布局的选项。其他几个选项的解释如下。</p>
<pre><code class="code-highlight"><span class="code-line line-number" line="1">-e 开启精确匹配
</span><span class="code-line line-number" line="2">--no-sort 不要排序
</span><span class="code-line line-number" line="3">--tac 逆转输入，因为我们希望最后的历史记录在最前面
</span><span class="code-line line-number" line="4">--query 查询词
</span></code></pre>
<p>最后使用 <code>zle</code>(zsh line editor) 来把我们选择的命令写入命令行当中</p>
<h2>设置 snippets</h2>
<p>使用别人写好的工具 <a href="https://github.com/knqyf263/pet">pet</a>。相比于自己在 shell 中实现，<code>pet</code> 提供了将 <code>snippets</code> 同步到仓库的功能（虽然自己写也不难）。</p>
<pre><code class="language-bash:~/.zshrc code-highlight"><span class="code-line line-number" line="1"># Select snippets at the current line (like C-r)
</span><span class="code-line line-number" line="2">function pet-select () {
</span><span class="code-line line-number" line="3">  BUFFER=$(pet search --color --query "$LBUFFER")
</span><span class="code-line line-number" line="4">  CURSOR=$#BUFFER
</span><span class="code-line line-number" line="5">  zle redisplay
</span><span class="code-line line-number" line="6">}
</span><span class="code-line line-number" line="7">zle -N pet-select
</span><span class="code-line line-number" line="8">stty -ixon
</span><span class="code-line line-number" line="9">bindkey '^s' pet-select
</span></code></pre>
<section data-footnotes="" class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p><a href="https://unix.stackexchange.com/questions/11939/how-to-get-only-the-unique-results-without-having-to-sort-data">how to get the unique result</a> <a href="#user-content-fnref-1" data-footnote-backref="" class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <author>lxymontage@gmail.com (Travis Road)</author>
        </item>
    </channel>
</rss>